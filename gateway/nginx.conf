worker_processes 1;

events { worker_connections 1024; }

http {
    upstream user_service {
        server user-service:8080;
    }

    upstream trip_service {
        server trip-service:8081;
    }

    server {
        listen 80;

        # Validate requests via auth-service before proxying (using auth_request)
        # nginx will call /auth/validate on the auth-service; that endpoint should return 200 for valid tokens
        location = /_auth_validate {
            internal;
            proxy_pass http://auth-service:3000/validate;
            proxy_set_header Content-Type "application/json";
            proxy_pass_request_body off;
            proxy_set_header       X-Original-URI $request_uri;
            proxy_set_header       Authorization $http_authorization;
        }

        # Public endpoints (no auth required)
        location = /api/users {
            # Registration endpoint
            proxy_pass http://user_service/users;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location = /api/sessions {
            # Login endpoint
            proxy_pass http://user_service/sessions;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location = /api/trips/estimate {
            # Price estimation endpoint
            proxy_pass http://trip_service/trips/estimate;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Protected endpoints (require JWT via auth_request)
        location = /api/trips {
            # Create trip endpoint (POST /api/trips)
            auth_request /_auth_validate;
            proxy_pass http://trip_service/trips;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        location /api/trips/ {
            # Other trip endpoints (e.g., /api/trips/:id/cancel)
            auth_request /_auth_validate;
            rewrite ^/api/trips/(.*)$ /trips/$1 break;
            proxy_pass http://trip_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        location /api/users/ {
            # User profile endpoints (e.g., /api/users/me)
            auth_request /_auth_validate;
            rewrite ^/api/users/(.*)$ /users/$1 break;
            proxy_pass http://user_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        location /health {
            return 200 '{"status":"ok"}';
            add_header Content-Type application/json;
        }
    }
}