// file: driver-service/services/driver.service.js
const Redis = require("ioredis");

const redisUrl = process.env.REDIS_URL || "redis://localhost:6379";
const redis = new Redis(redisUrl);

const DRIVER_LOCATION_KEY = "driver_locations";
const DRIVER_STATUS_KEY = "driver_status";

redis.on("connect", () => {
  console.log("DriverService (Service) ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi Redis! üéâ");
});
redis.on("error", (err) => {
  console.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Redis:", err);
});

/**
 * Logic c·∫≠p nh·∫≠t v·ªã tr√≠
 */
const updateLocation = async (driverId, longitude, latitude) => {
  try {
    await redis.geoadd(DRIVER_LOCATION_KEY, longitude, latitude, driverId);
    return { status: "updated", driver_id: driverId };
  } catch (error) {
    console.error("L·ªói service (updateLocation):", error);
    throw new Error("L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t v·ªã tr√≠");
  }
};

/**
 * Logic t√¨m t√†i x·∫ø g·∫ßn (ƒê√É N√ÇNG C·∫§P)
 * (H·ªó tr·ª£ Driver US2: Ch·ªâ t√¨m t√†i x·∫ø ONLINE)
 */
const findNearby = async (lng, lat, radius) => {
  try {
    // B∆∞·ªõc 1: T√¨m t·∫•t c·∫£ t√†i x·∫ø g·∫ßn (nh∆∞ c≈©)
    const results = await redis.geosearch(
      DRIVER_LOCATION_KEY,
      "FROMLONLAT",
      lng,
      lat,
      "BYRADIUS",
      radius,
      "km",
      "WITHDIST",
      "ASC"
    );

    const nearbyDrivers = results.map((result) => ({
      driver_id: result[0],
      distance_km: parseFloat(result[1]),
    }));

    if (nearbyDrivers.length === 0) {
      return { drivers: [] };
    }

    // --- LOGIC M·ªöI: L·ªåC TR·∫†NG TH√ÅI "ONLINE" ---

    // B∆∞·ªõc 2: L·∫•y tr·∫°ng th√°i c·ªßa T·∫§T C·∫¢ t√†i x·∫ø t√¨m ƒë∆∞·ª£c
    // HMGET cho ph√©p l·∫•y nhi·ªÅu 'field' (driver_id) t·ª´ m·ªôt 'key' (DRIVER_STATUS_KEY)
    const driverIds = nearbyDrivers.map((d) => d.driver_id);
    const statuses = await redis.hmget(DRIVER_STATUS_KEY, ...driverIds);

    // B∆∞·ªõc 3: L·ªçc v√† k·∫øt h·ª£p k·∫øt qu·∫£
    const onlineDrivers = [];
    for (let i = 0; i < nearbyDrivers.length; i++) {
      const driver = nearbyDrivers[i];
      const status = statuses[i]; // L·∫•y tr·∫°ng th√°i t∆∞∆°ng ·ª©ng

      // Ch·ªâ th√™m v√†o k·∫øt qu·∫£ n·∫øu tr·∫°ng th√°i l√† "ONLINE"
      if (status === "ONLINE") {
        onlineDrivers.push({
          driver_id: driver.driver_id,
          distance_km: driver.distance_km,
        });
      }
    }

    return { drivers: onlineDrivers };
  } catch (error) {
    console.error("L·ªói service (findNearby):", error);
    throw new Error("L·ªói m√°y ch·ªß khi t√¨m t√†i x·∫ø");
  }
};

/**
 * Logic c·∫≠p nh·∫≠t tr·∫°ng th√°i (H·ªó tr·ª£ Driver US2)
 */
const updateStatus = async (driverId, status) => {
  try {
    await redis.hset(DRIVER_STATUS_KEY, driverId, status);
    return { driver_id: driverId, status: status };
  } catch (error) {
    console.error("L·ªói service (updateStatus):", error);
    throw new Error("L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t tr·∫°ng th√°i");
  }
};

/**
 * Logic l·∫•y v·ªã tr√≠ c·ªßa 1 t√†i x·∫ø (H·ªó tr·ª£ Passenger US3)
 */
const getLocation = async (driverId) => {
  try {
    // GEOPOS tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c t·ªça ƒë·ªô [ [longitude, latitude] ]
    const locationArray = await redis.geopos(DRIVER_LOCATION_KEY, driverId);

    if (!locationArray || !locationArray[0]) {
      return null; // Kh√¥ng t√¨m th·∫•y v·ªã tr√≠
    }

    const location = {
      longitude: parseFloat(locationArray[0][0]),
      latitude: parseFloat(locationArray[0][1]),
    };

    return { driver_id: driverId, location: location };
  } catch (error) {
    console.error("L·ªói service (getLocation):", error);
    throw new Error("L·ªói m√°y ch·ªß khi l·∫•y v·ªã tr√≠");
  }
};

// Xu·∫•t c√°c h√†m logic n√†y ra
module.exports = {
  updateLocation,
  findNearby,
  updateStatus,
  getLocation,
};
