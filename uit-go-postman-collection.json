{
	"info": {
		"_postman_id": "uit-go-backend-2024",
		"name": "UIT-Go Backend - Complete API Collection",
		"description": "Complete API collection for UIT-Go ride-hailing platform.\n\n## Services\n- **User Service** (8080): User registration, authentication\n- **Trip Service** (8081): Trip management, estimation\n- **Driver Service** (8082): Driver location tracking\n- **Auth Service** (3000): JWT validation\n- **API Gateway** (8088): Unified entry point with Nginx\n\n## Authentication\nMost endpoints require JWT token in Authorization header.\n\n### How to use:\n1. Run \"1. Register User\" to create account\n2. Run \"2. Login\" to get JWT token (auto-saved to {{accessToken}})\n3. Protected endpoints will automatically use {{accessToken}}\n\n## Environment Variables\n- `baseUrl`: http://localhost:8088 (API Gateway)\n- `accessToken`: Auto-populated after login\n- `userId`: Auto-populated after registration\n- `tripId`: Auto-populated after trip creation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Service",
			"item": [
				{
					"name": "1. Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has user object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('fullName');",
									"    pm.expect(jsonData).to.have.property('role');",
									"    pm.expect(jsonData).to.not.have.property('password');",
									"});",
									"",
									"// Save userId to environment",
									"pm.test(\"Save userId to environment\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"userId\", jsonData.id);",
									"    console.log(\"userId saved: \" + jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random email to avoid duplicate",
									"const timestamp = Date.now();",
									"const randomEmail = `test_${timestamp}@uit.edu.vn`;",
									"pm.environment.set(\"testEmail\", randomEmail);",
									"console.log(\"Generated email: \" + randomEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"DemoPassword123\",\n  \"fullName\": \"Nguyen Van Demo\",\n  \"role\": \"PASSENGER\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Register a new user account.\n\n**Business Logic:**\n- Validates email format and uniqueness\n- Hashes password with bcrypt (10 rounds)\n- Saves user to postgres-user database\n- Returns user object without password\n\n**Validation Rules:**\n- Email: Required, unique, valid format\n- Password: Required, min 8 characters\n- FullName: Required\n- Role: Required, enum [PASSENGER, DRIVER]"
					},
					"response": []
				},
				{
					"name": "2. Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.expect(jsonData.access_token).to.be.a('string');",
									"    pm.expect(jsonData.access_token.length).to.be.greaterThan(50);",
									"});",
									"",
									"// Save token to environment",
									"pm.test(\"Save token to environment\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"accessToken\", jsonData.access_token);",
									"    console.log(\"Token saved (first 50 chars): \" + jsonData.access_token.substring(0, 50) + \"...\");",
									"});",
									"",
									"// Decode JWT payload (informational)",
									"var token = pm.response.json().access_token;",
									"if (token) {",
									"    var payload = token.split('.')[1];",
									"    var decoded = JSON.parse(atob(payload));",
									"    console.log(\"JWT Payload:\", decoded);",
									"    console.log(\"User ID:\", decoded.userId);",
									"    console.log(\"Email:\", decoded.email);",
									"    console.log(\"Role:\", decoded.role);",
									"    console.log(\"Expires at:\", new Date(decoded.exp * 1000).toLocaleString());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"DemoPassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/sessions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"sessions"
							]
						},
						"description": "Authenticate user and get JWT token.\n\n**Business Logic:**\n1. Find user by email in postgres-user\n2. Compare password with bcrypt.compare()\n3. Generate JWT token with HS512 algorithm\n4. Sign token with JWT_SECRET\n5. Set expiration to 24 hours\n6. Return token\n\n**JWT Token Structure:**\n- Header: {\"alg\": \"HS512\", \"typ\": \"JWT\"}\n- Payload: {\"userId\", \"email\", \"role\", \"iat\", \"exp\"}\n- Signature: HMACSHA512(header + payload, JWT_SECRET)\n\n**Token Usage:**\nAdd to Authorization header: `Bearer {token}`"
					},
					"response": []
				},
				{
					"name": "3. Get Current User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has user profile\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('fullName');",
									"    pm.expect(jsonData).to.have.property('role');",
									"    pm.expect(jsonData).to.not.have.property('password');",
									"});",
									"",
									"// Verify JWT token worked",
									"pm.test(\"JWT authentication successful\", function () {",
									"    pm.response.to.not.have.status(401);",
									"    pm.response.to.not.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						},
						"description": "Get profile of currently authenticated user.\n\n**Authentication Flow:**\n1. Client sends request with Authorization header\n2. Nginx intercepts and sends auth_request to auth-service\n3. Auth service validates JWT signature and expiration\n4. If valid, auth service returns 200 OK\n5. Nginx forwards request to user-service\n6. User service extracts userId from JWT payload\n7. User service queries postgres-user by userId\n8. Return user object\n\n**Security:**\n- Requires valid JWT token\n- Token must not be expired (24 hours)\n- Returns 401 if missing/invalid token"
					},
					"response": []
				}
			],
			"description": "User Service manages user accounts and authentication.\n\n**Database**: postgres-user (port 5431)\n**Endpoints**:\n- POST /api/users - Register\n- POST /api/sessions - Login\n- GET /api/users/me - Profile (protected)"
		},
		{
			"name": "Trip Service",
			"item": [
				{
					"name": "4. Estimate Trip Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has estimation data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('estimatedPrice');",
									"    pm.expect(jsonData).to.have.property('distanceMeters');",
									"    pm.expect(jsonData.estimatedPrice).to.be.a('number');",
									"    pm.expect(jsonData.distanceMeters).to.be.a('number');",
									"});",
									"",
									"// Test pricing logic",
									"pm.test(\"Price calculation is reasonable\", function () {",
									"    var jsonData = pm.response.json();",
									"    // BASE_PRICE = 10,000 VND",
									"    // PRICE_PER_METER = 10 VND",
									"    var expectedMinPrice = 10000;",
									"    pm.expect(jsonData.estimatedPrice).to.be.at.least(expectedMinPrice);",
									"    ",
									"    // Verify formula: price = BASE_PRICE + (distance * PRICE_PER_METER)",
									"    var calculatedPrice = 10000 + (jsonData.distanceMeters * 10);",
									"    pm.expect(Math.abs(jsonData.estimatedPrice - calculatedPrice)).to.be.lessThan(100);",
									"    ",
									"    console.log(\"Distance: \" + jsonData.distanceMeters + \" meters\");",
									"    console.log(\"Price: \" + jsonData.estimatedPrice + \" VND\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"origin\": {\n    \"latitude\": 10.762622,\n    \"longitude\": 106.660172\n  },\n  \"destination\": {\n    \"latitude\": 10.772622,\n    \"longitude\": 106.670172\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/trips/estimate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"trips",
								"estimate"
							]
						},
						"description": "Estimate trip price based on distance.\n\n**Pricing Algorithm:**\n```\nBASE_PRICE = 10,000 VND\nPRICE_PER_METER = 10 VND\n\n1. Calculate Euclidean distance:\n   distance = sqrt((lat2-lat1)^2 + (lng2-lng1)^2) * 111,000\n   (111,000 meters per degree at equator)\n\n2. Calculate price:\n   price = BASE_PRICE + (distance * PRICE_PER_METER)\n```\n\n**Example:**\n- Origin: UIT Campus (10.762622, 106.660172)\n- Destination: 1.5km north-east (10.772622, 106.670172)\n- Distance: ~1,570 meters\n- Price: 10,000 + (1,570 * 10) = 25,700 VND\n\n**Authentication:** Not required (public endpoint)"
					},
					"response": []
				},
				{
					"name": "5. Create Trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has trip object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('passengerId');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('origin');",
									"    pm.expect(jsonData).to.have.property('destination');",
									"    pm.expect(jsonData).to.have.property('estimatedPrice');",
									"});",
									"",
									"// Test initial status",
									"pm.test(\"Trip status is FINDING_DRIVER\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal('FINDING_DRIVER');",
									"});",
									"",
									"// Save tripId to environment",
									"pm.test(\"Save tripId to environment\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"tripId\", jsonData.id);",
									"    console.log(\"tripId saved: \" + jsonData.id);",
									"});",
									"",
									"// Log inter-service communication",
									"console.log(\"Inter-service communication happened:\");",
									"console.log(\"1. Trip Service → User Service: Verify passenger exists\");",
									"console.log(\"2. Trip Service → Driver Service: Find available drivers\");",
									"console.log(\"3. Trip Service → postgres-trip: Save trip record\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"origin\": {\n    \"latitude\": 10.762622,\n    \"longitude\": 106.660172\n  },\n  \"destination\": {\n    \"latitude\": 10.772622,\n    \"longitude\": 106.670172\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/trips",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"trips"
							]
						},
						"description": "Create a new trip request.\n\n**Inter-Service Communication Flow:**\n1. API Gateway validates JWT via auth-service\n2. Trip Service verifies passengerId exists:\n   `GET http://user-service:8080/api/users/{passengerId}`\n3. Trip Service finds available drivers:\n   `GET http://driver-service:8082/api/drivers/nearby?lat=...&lng=...`\n4. Trip Service calculates estimatedPrice\n5. Trip Service saves trip to postgres-trip\n6. Return trip object with status=FINDING_DRIVER\n\n**Authentication:**\n- Required: JWT token with PASSENGER role\n- Returns 401 if missing/invalid token\n- Returns 403 if user role is not PASSENGER\n\n**Database:**\n- Saves to postgres-trip (port 5432)\n\n**Status Flow:**\n- FINDING_DRIVER → DRIVER_ASSIGNED → IN_PROGRESS → COMPLETED"
					},
					"response": []
				}
			],
			"description": "Trip Service manages trip requests and pricing.\n\n**Database**: postgres-trip (port 5432)\n**Dependencies**: User Service, Driver Service\n**Endpoints**:\n- POST /api/trips/estimate - Estimate (public)\n- POST /api/trips - Create (protected)"
		},
		{
			"name": "Driver Service",
			"item": [
				{
					"name": "6. Find Nearby Drivers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// Test driver objects (if any found)",
									"if (pm.response.json().length > 0) {",
									"    pm.test(\"Driver objects have required fields\", function () {",
									"        var driver = pm.response.json()[0];",
									"        pm.expect(driver).to.have.property('driverId');",
									"        pm.expect(driver).to.have.property('latitude');",
									"        pm.expect(driver).to.have.property('longitude');",
									"        pm.expect(driver).to.have.property('distance');",
									"    });",
									"    ",
									"    pm.test(\"Drivers are within radius\", function () {",
									"        var drivers = pm.response.json();",
									"        drivers.forEach(function(driver) {",
									"            pm.expect(driver.distance).to.be.at.most(5000); // 5km radius",
									"        });",
									"    });",
									"    ",
									"    console.log(\"Found \" + pm.response.json().length + \" drivers\");",
									"} else {",
									"    console.log(\"No drivers found within radius\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/drivers/nearby?lat=10.762622&lng=106.660172&radius=5000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"drivers",
								"nearby"
							],
							"query": [
								{
									"key": "lat",
									"value": "10.762622",
									"description": "Latitude (required)"
								},
								{
									"key": "lng",
									"value": "106.660172",
									"description": "Longitude (required)"
								},
								{
									"key": "radius",
									"value": "5000",
									"description": "Search radius in meters (optional, default=5000)"
								}
							]
						},
						"description": "Find available drivers near a location.\n\n**Redis Geospatial:**\nDriver Service uses Redis GEOSPATIAL commands:\n- `GEOADD driver:locations {lng} {lat} {driverId}` - Add driver location\n- `GEORADIUS driver:locations {lng} {lat} {radius} m` - Find nearby\n- TTL: 5 minutes (drivers must update location regularly)\n\n**Algorithm:**\n1. Query Redis: `GEORADIUS driver:locations {lng} {lat} {radius} m`\n2. Redis uses geohash to efficiently find nearby drivers\n3. Sort results by distance (ascending)\n4. Return array of driver locations\n\n**Query Parameters:**\n- `lat` (required): Latitude (-90 to 90)\n- `lng` (required): Longitude (-180 to 180)\n- `radius` (optional): Search radius in meters (default: 5000)\n\n**Example:**\n- Location: UIT Campus (10.762622, 106.660172)\n- Radius: 5000 meters (5 km)\n- Returns: All drivers within 5km, sorted by distance\n\n**Authentication:** Not required (public endpoint)"
					},
					"response": []
				}
			],
			"description": "Driver Service manages driver locations and availability.\n\n**Database**: redis-driver (port 6379)\n**Technology**: Redis Geospatial\n**Endpoints**:\n- GET /api/drivers/nearby - Find nearby (public)"
		},
		{
			"name": "Complete E2E Flow",
			"item": [
				{
					"name": "E2E: 1. Register → 2. Login → 3. Estimate → 4. Create Trip",
					"item": [
						{
							"name": "Step 1: Register",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const timestamp = Date.now();",
											"pm.environment.set(\"e2eEmail\", `e2e_${timestamp}@uit.edu.vn`);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User registered\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"e2eUserId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{e2eEmail}}\",\n  \"password\": \"E2EPassword123\",\n  \"fullName\": \"E2E Test User\",\n  \"role\": \"PASSENGER\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 2: Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"e2eToken\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{e2eEmail}}\",\n  \"password\": \"E2EPassword123\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/sessions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 3: Estimate Price",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Estimation successful\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"e2eEstimatedPrice\", jsonData.estimatedPrice);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"origin\": {\"latitude\": 10.762622, \"longitude\": 106.660172},\n  \"destination\": {\"latitude\": 10.772622, \"longitude\": 106.670172}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/trips/estimate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"trips",
										"estimate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 4: Create Trip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Trip created\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"e2eTripId\", jsonData.id);",
											"    pm.expect(jsonData.status).to.equal('FINDING_DRIVER');",
											"});",
											"",
											"console.log(\"===== E2E FLOW COMPLETED =====\");",
											"console.log(\"User ID: \" + pm.environment.get(\"e2eUserId\"));",
											"console.log(\"Email: \" + pm.environment.get(\"e2eEmail\"));",
											"console.log(\"Trip ID: \" + pm.environment.get(\"e2eTripId\"));",
											"console.log(\"Estimated Price: \" + pm.environment.get(\"e2eEstimatedPrice\") + \" VND\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{e2eToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"origin\": {\"latitude\": 10.762622, \"longitude\": 106.660172},\n  \"destination\": {\"latitude\": 10.772622, \"longitude\": 106.670172}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/trips",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"trips"
									]
								}
							},
							"response": []
						}
					],
					"description": "Complete end-to-end flow demonstrating:\n1. User Registration\n2. User Login (JWT)\n3. Trip Price Estimation\n4. Trip Creation (with authentication)\n\n**How to run:**\n1. Right-click on this folder\n2. Select \"Run folder\"\n3. All 4 requests will run sequentially\n4. Check \"Test Results\" tab for verification\n\n**What happens:**\n- Creates new user with timestamp-based email\n- Logs in and saves JWT token\n- Estimates trip price\n- Creates trip with authentication\n- All data is saved to environment variables\n\n**Inter-service communication verified:**\n- Trip Service → User Service (verify passenger)\n- Trip Service → Driver Service (find drivers)\n- API Gateway → Auth Service (JWT validation)"
				}
			],
			"description": "End-to-end flow testing complete user journey.\n\n**Usage:**\n1. Right-click on folder → Run folder\n2. All tests run sequentially\n3. Check Test Results tab"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log(\"=== Request: \" + pm.info.requestName + \" ===\");",
					"console.log(\"Method: \" + pm.request.method);",
					"console.log(\"URL: \" + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"console.log(\"Status: \" + pm.response.code + \" \" + pm.response.status);",
					"console.log(\"Time: \" + pm.response.responseTime + \"ms\");",
					"console.log(\"===================\");"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8088",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "tripId",
			"value": "",
			"type": "string"
		},
		{
			"key": "testEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "e2eEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "e2eUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "e2eToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "e2eTripId",
			"value": "",
			"type": "string"
		},
		{
			"key": "e2eEstimatedPrice",
			"value": "",
			"type": "string"
		}
	]
}
